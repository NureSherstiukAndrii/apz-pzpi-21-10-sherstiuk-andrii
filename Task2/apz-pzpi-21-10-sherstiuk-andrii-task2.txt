1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система має багаторівневу архітектуру, також відома як багатошарова архітектура, вона є структурованим підходом до розробки програмного забезпечення, який розділяє додаток на різні логічні рівні або шари. Ця архітектура дозволяє чітко розділити відповідальність між різними частинами системи, забезпечуючи при цьому масштабованість та безпеку. Кожен рівень виконує певні функції та взаємодіє з іншими рівнями через чітко визначені інтерфейси. Це сприяє модульності, зручності супроводу та масштабованості програми.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання ілюструє спосіб розташування елементів чи компонентів системи на апаратному забезпеченні та їх взаємодію. За допомогою цієї діаграми ми отримуємо уявлення про те, як програмне забезпечення взаємодіє з обладнанням і визначити вимоги до виконавчого середовища. Діаграму розгортання наведено на рисунку 1.
В якості СУБД використовується Microsoft SQL Server, яка має швидку взаємодію з серверною частиною. Вона забезпечує високу надійність даних та підтримує складні транзакції, що робить її ідеальним вибором для критично важливих бізнес-додатків.
В якості платформи для розробки Backend частини використовується фреймворк Express, мови програмування NodeJS. Ця частина представляє собою API, яка взаємодіє зі всіма іншими частинами. Підключення до бази даних відбувається за допомогою бібліотеки mssql. А налаштування CORS дозволяють безпечно взаємодіяти з клієнтською частиною.
Web-частина використовує бібліотеку React, основою якої є JavaScript, вона взаємодіє з серверною частиною за допомогою REST API. Обов’язково треба мати встановлений браузер та стабільний доступ до інтернету. Web-застосунок містить клієнтську частину для всіх ролей. З серверною частиною він взаємодіє через HTTPS запити.
Мобільний застосунок розроблено за допомогою мови програмування Kotlin. Він містить функціонал для користувача з роллю тренер. Завантажити його можна на пристрій з операційною системою Android.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Найголовніша частина програмної системи є серверна, бо вона взаємодіє з іншими частина, такими як клієнтська частина, розумний пристрій, mobile частина та база даних. Тому для того щоб покращити якість цієї частини, розробник обирає архітектуру під свої потреби.
Дана серверна частина має чисту архітектуру (Clean architecture). За допомогою принципів чистої архітектури, серверна частина має високу стійкість до змін. Вона швидко адаптується до нових вимог та можливостей, зберігаючи при цьому високу якість коду та продуктивність. Крім того, система стає набагато простішою для розуміння та супроводу, що робить її більш доступною для інших розробників.
Принципи чистої архітектури також допомагають уникнути проблем із залежностями та розділити додаток на логічні блоки. Це підвищує зручність додавання нових функцій та зміни вже існуючих. В результаті час розробки скорочується, а додаток стає більш гнучким і масштабованим.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для опису поведінки системи використовується UML діаграми прецедентів.
Головним актором системи є «Гірськолижник», він являє собою головного користувача системи, саме для нього і розробляється цей продукт. Він має можливості реєстрації та подальшого входу до системи, може вести особистий блог, записуватися на різні події та знайти собі тренера для подальшого розвитку у вибраному виду спорту. Також він може поділитися своїми враженнями про тренера залишивши відгук на його сторінці, і так само залишити коментар під сервісом. Можливість скаржитися на користувачів, котрі некоректно себе поводять.
Актор «Тренер» представляє собою людину котра має досвід занять в екстремальних видах спорту. Він має такі ж можливості як і атлет, але він ще може додавати клієнтів собі на заняття, але перед цим йому треба перевірити профіль клієнта щоб визначити його рівень підготовки.
Актор «Адміністратор» є адміністратором системи. Він має змогу переглядати заблокованих користувачів, блокувати та розблоковувати їх. Переглядати таблицю скарг користувача та робити певні висновки.
Актор «Компанія» представляє собою компанію котра має своїх тренерів та надає свої послуги іншим. Компанія має змогу створювати змагання між користувачами та додавати/видаляти тренерів зі свого списку. 

5 ПОБУДОВА ER-ДІАГРАМИ

ER-модель є структурною моделлю даних що служить для концептуального моделювання предметних областей. Ця модель використовується на етапі високорівневого проектування баз даних і дозволяє ідентифікувати ключові сутності та визначити взаємозв’язки між ними.
ER-діаграма наведена у додатку Е та містить у собі 8 сутностей. ER-модель містить наступні сутності:
-	Користувач: Описує всіх користувачів. За допомогою поля role і визначається чи користувач є атлетом, тренером або адміністратором;
-	Подія:	Описує	змагання або збір, котре у системі створює адміністратор або компанія;
-	Пост: Описує пост користувача, котрий веде особистий блог;
-	Рейтинг тренера: Описує рейтинг тренера, котрого оцінили інші користувачі;
-	Коментарі тренера: Описує відгуки та коментарі тренера, котрі залишають інші користувачі;
-	Коментарі сервіса: Описує відгукі всієї системи, котрі залишають користувачі;
-	Скарги: Описує скарги користувачів котрі некоректно себе поводять;
-	Історія користувача: Описує історію результатів користувача;
-	Компанія: Описує компанію;

6 СПЕЦИФІКАЦІЯ REST

Специфікація REST – це архітектурний стиль і підхід до розробки веб-сервісів. Він заснований на принципах HTTP-протоколу і спрямований на створення масштабованих та простих у використанні веб-API. REST не є стандартом або протоколом, а є набором рекомендацій і принципів, які допомагають розробникам будувати веб-сервіси, що забезпечують взаємодію між різними системами через інтернет. У додатку А представлена таблиця  специфікації Rest. 

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів – це структурна діаграма мови уніфікованого моделювання, вона визначає особливості фізичного уявлення системи. Діаграма компонентів дозволяє визначити архітектуру системи, що розробляється, встановивши залежності між програмними компонентами. Діаграма компонентів надає загальну картину архітектури системи, допомагає розробникам та архітекторам краще зрозуміти її структуру та взаємозв'язки, а також є корисним інструментом для комунікації та документування архітектурних рішень. 

ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено серверну частину програмної системи, реалізовано бізнес логіку, створено базу даних. Також детально показано структуру системи на розроблених діаграмах: UML діаграма прецедентів, UML діаграма розгортання, UML діаграма компонентів та ER-моделі даних.

ДОДАТОК А
Специфікація REST:
Admin	GET	api/bannedUsers	- Отримання всіх заблокованих користувачів
		api/getReports/:id - Отримання репортів користувача по ідентифікатору
	PATCH	api/addBannedUser/:id - Заблокувати користувача
		api/deleteBannedUser/:id - Розблокувати користувача
Coach	GET	coach/clients/:id - Отримання всіх клієнтів тренера по ідентифікатору
		coach/comments/:id - Отримання відгуків тренера	по ідентифікатору
		coach/topCoaches - Отримання кращих тренерів за рейтингом
	POST	coach/addClient?id - Відправлення заяви клієнта	на запис до тренера
		coach/addRating?id - Додавання рейтингу до тренера
	PATCH	coach/acceptClient?id -	Підтвердження заяви клієнта
		coach/changeRating?id - Зміна рейтингу тренера
	DELETE	coach/deleteClient/:id - Видалення клієнта зі списку тренера
Event	GET	events/allEvents - Отримання всіх подій
		events/event/:id - Отримання однієї події по ідентифікатору
		events/eventsWithFilters - Отримання подій за фільтрами
	POST	events/addEvent	- Додавання нової події
		events/addUserToEvent - Додавання користувача до події
	DELETE	events/deleteEvent?id - Видалення події
Post	GET	post/getAllPersonalPosts - Отримання постів авторизованого користувача
		post/getAllUserPosts/:id - Отримання постів користувача	по ідентифікатору
	POST	post/addPost - Додавання нового посту
	PATCH	post/editPost/:id - Редагування	посту по ідентифікатору
	DELETE	post/deletePost/:id - Видалення	посту по ідентифікатору
Company	GET	company/getCompanies - Отримання всіх компаній
		company/getAuthCompany - Отримання авторизованої компанії
		company/getCoaches - Отримання тренерів авторизованої компанії
		company/getCompany/:id - Отримання компанії по ідентифікатору
	POST	company/registration - Реєстрація компанії
		company/login - Авторизація компанії
		company/addCoach/:id - Відправка заявки на запис до команди тренерів компанії
	PATCH	company/acceptCoach/:id	- Підтвердження заяви тренера
	DELETE	company/deleteCoach/:id	- Відмова заяви тренера
Auth	POST	api/registration - Реєстрація користувача
		api/login - Перевірка користувача
unAuth	GET	unAuth/serviceComments - Отримання відгуків про сервіс
		unAuth/allUsers?role - Отримання всіх користувачів за роллю (окрім адміністраторів)
		unAuth/allUsersWithFilters - Отримання користувачів по фільтрам
		unAuth/user/:id - Отримання користувача по ідентифікатору

