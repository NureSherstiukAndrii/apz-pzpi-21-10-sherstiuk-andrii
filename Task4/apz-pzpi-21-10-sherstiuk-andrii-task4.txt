1 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для опису поведінки системи використовується UML діаграми прецедентів. Діаграму прецедентів адміністратора та компанії наведено на рисунку 1 та 2 відповідно, а діаграму прецедентів головних акторів у додатку А.
Головним актором системи є "Гірськолижник", він представляє основного користувача системи, і цей продукт розроблений для нього. У нього є можливість зареєструватися і авторизуватися, вести особистий блог, записуватися на різні заходи і знаходити тренера для подальшого розвитку обраного виду гірськолижного спорту.Він також може поділитися своїми враженнями про тренера, залишивши відгук на своїй сторінці, а також може залишати коментарі під сервісом. Можливість скаржитися на користувачів, котрі некоректно себе поводять. 
Актор "Тренер" - це людина, яка має досвід занять екстремальними видами спорту. Він має такі ж здібності, що і у спортсмена, але він все одно може додати клієнта в свій клас, але перед цим йому потрібно перевірити профіль клієнта, щоб визначити рівень його підготовки.
Актор "Адміністратор" - це системний адміністратор. Він може переглядати заблокованих користувачів, а потім блокувати та розблокувати їх. Переглядати таблицю скарг користувачів і робити певні висновки. Також може створювати події.
Актор «Компанія» представляє собою компанію котра має своїх тренерів та надає свої послуги іншим. Компанія має змогу створювати змагання між користувачами та додавати/видаляти тренерів зі свого списку.

2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів - це структурна схема єдиної мови моделювання, яка визначає характеристики фізичного представлення системи. Діаграми компонентів дозволяють визначити архітектуру розроблюваної системи шляхом встановлення залежностей між програмними компонентами. Діаграми компонентів дають повне уявлення про архітектуру системи, допомагаючи розробникам та архітекторам краще зрозуміти її структуру та взаємозв'язки. На рисунку 3 показана схема компонентів системи UML.
Для розробки діаграми компонентів були виділені такі структурні компоненти клієнтської частини:
-	Clients – сторінка користувачів.
-	Events – сторінка подій.
-	Company – сторінка компанії.
-	Home – головна сторінки.

3 РОЗРОБКА ДІАГАРАМИ ДІЯЛЬНОСТІ

Діаграма діяльності ілюструє, як координується діяльність для надання послуги, що може відбуватися на різних рівнях абстракції. Зазвичай, подія досягається через певні операції, особливо коли операція спрямована на досягнення кількох різних цілей, які потребують координації. Вона також показує, як події в одному випадку використання співвідносяться одна з одною, зокрема у ситуаціях, де дії можуть збігатися і потребують узгодження. Ця діаграма також підходить для моделювання того, як набір випадків використання координується для представлення бізнес-процесів. Дана діаграма зображена у додатку Б.

4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Діаграма станів призначена для візуалізації та аналізу різних станів об'єкта чи системи та їх переходів. Вона дозволяє моделювати поведінку системи в залежності від її поточного стану та подій. Такі діаграми широко застосовуються при проектуванні автоматизованих систем, у програмуванні, а також для документування та комунікації між учасниками проекту. Загалом, вони допомагають розробникам краще розуміти та моделювати динамічну поведінку систем. Діаграма станів зображена на рисунку 4.
Для розробки діаграми станів були виділені такі процеси:
-	Авторизація та реєстрація.
-	Залишення коментар сервісу.
-	Залишення коментар тренеру.
-	Особистий кабінет.
-	Стати учасником події.
-	Поскаржитися на користувача.

5 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

Для розробки клієнтської частини програмної системи була обрана бібліотека React, яка використовує мову програмування Java Script. Для написання веб-сторінок та коректного відображення було використано HTML5 та препроцессор CSS під назвою SCSS.
Архітектура кієнтськох частини є "Component-Based Architecture", тобто написана за допомогою компонентів та їх взаємодії один з одним.
Клієнтська частина надає графічний інтерфейс для відображення реалізованої бізнес логіки:
-	Наявність історії тренувань в особистому кабінеті з підрахунком коефіцієнтів за певними формулами.
-	Наяність підрахунку середнього рейтингу тренерів. 
Завдяки JWT токен, котрий генерується і приходить з серверної частини надаються права до певних функцій в залежності від ролі, зберігається він у localStorage.
Зв’язок із серверною частиною було реалізовано за допомогою технології axios та fetch, що дозволяє відправляти асинхронні запити.

ВИСНОВКИ

В ході лабораторної робіти була розроблена клієнтська частина програмної системи, реалізовані всі продумані сторінки і функції, інтернаціоналізація і управління системою. Крім того, структура системи детально показана на таких діаграмах, як діаграма прецедентів адміністратора UML, діаграма прецедентів основних учасників UML, діаграма компонентів UML, діаграма станів UML, діаграма активності UML.